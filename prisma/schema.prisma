// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        String     @id @default(uuid())
  email     String  @unique @db.VarChar(150)
  password  String  @db.VarChar(250)
  firstname String  @db.VarChar(150)
  lastname  String  @db.VarChar(150)
  phone     String? @db.VarChar(150)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([email])
  wallets wallets[]
}

enum WalletTransactionStatus {
  ROLLBACK
  PENDING
  SUCCESS
  FAILED
}

enum WalletTransactionType {
  CREDIT
  DEBIT
}

model wallet_transactions {
  id                                                     Int                     @id @default(autoincrement())
  ref                                        String                  @db.VarChar(100)
  narration                                              String?                 @db.VarChar(250)
  amount                                                 Decimal                 @db.Decimal(15, 4)
  type                                       WalletTransactionType?
  prev_balance      Float  
  new_balance      Float   
  debit_account_id                                       String?
  credit_account_id                                      String?
  created_at                                             DateTime                @default(now())
  updated_at                                             DateTime                @default(now())
  status                                                 WalletTransactionStatus
  wallets_wallet_transactions_credit_account_idTowallets wallets?                 @relation("wallet_transactions_credit_account_idTowallets", fields: [credit_account_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  wallets_wallet_transactions_debit_account_idTowallets  wallets?                 @relation("wallet_transactions_debit_account_idTowallets", fields: [debit_account_id], references: [id], onDelete: SetNull, onUpdate: SetNull)

  @@index([ref, status, debit_account_id, credit_account_id])
}

model wallets {
 id   String      @id @default(uuid())
  name         String   @db.VarChar(150)
  user_id      String      @unique
  balance      Float  @default(0.0) 
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  users                                                               users                 @relation(fields: [user_id], references: [id])
  wallet_transactions_wallet_transactions_credit_account_idTowallets wallet_transactions[] @relation("wallet_transactions_credit_account_idTowallets")
  wallet_transactions_wallet_transactions_debit_account_idTowallets  wallet_transactions[] @relation("wallet_transactions_debit_account_idTowallets")

  @@index([id, user_id])
}
